{"version":3,"sources":["Components/Header.js","Components/Score.js","Components/Cards.js","Components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Score","scores","currentScore","maxScore","Cards","addPoint","resetCurrentScore","useState","image","clicked","images","setImages","handleClick","index","newArr","toggleClickedStatus","tempArr","shuffledImages","length","randomNumber","Math","floor","random","push","splice","shuffleImages","useEffect","map","imageObj","onClick","src","Game","getCurrentScore","getMaxScore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ea6bd0b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header-container\">\r\n      <h1>Memory Game</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\nimport '../Styles/Score.css'\r\n\r\nfunction Score({scores: {currentScore, maxScore}}) {\r\n\r\n  return (\r\n    <div className=\"score-container\">\r\n      <div className=\"current-score-container\">\r\n        <p>Current Score</p>\r\n        {<p>{currentScore}</p>}\r\n      </div>\r\n      <div className=\"max-score-container\">\r\n        <p>Max Score</p>\r\n        <p>{maxScore}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Score","import React, {useState, useEffect} from 'react';\r\nimport '../Styles/Cards.css';\r\n\r\nfunction Cards({addPoint, resetCurrentScore}) {\r\n\r\n  const [images, setImages] = useState([\r\n    {image: './images/case.png', clicked: 0}, \r\n    {image: './images/cpu.png', clicked: 0},\r\n    {image: './images/gpu.png', clicked: 0}, \r\n    {image: './images/headset.png', clicked: 0},\r\n    {image: './images/keyboard.png', clicked: 0},\r\n    {image: './images/microphone.png', clicked: 0},\r\n    {image: './images/monitor.png', clicked: 0},\r\n    {image: './images/motherboard.png', clicked: 0},\r\n    {image: './images/mouse.png', clicked: 0},\r\n    {image: './images/psu.png', clicked: 0},\r\n    {image: './images/ram.png', clicked: 0},\r\n    {image: './images/storage.png', clicked: 0},\r\n  ]);\r\n\r\n  const shuffleImages = () => {\r\n    let tempArr = images;\r\n    let shuffledImages = [];\r\n\r\n    while (tempArr.length > 0) {\r\n      let randomNumber = Math.floor(Math.random() * tempArr.length);\r\n      shuffledImages.push(tempArr[randomNumber]);\r\n      tempArr.splice(randomNumber, 1);\r\n    }\r\n    \r\n    setImages(shuffledImages);\r\n  }\r\n\r\n  const resetCurrentRound = () => {\r\n    images.map((image) => {\r\n      image.clicked = 0;\r\n    });\r\n    resetCurrentScore();\r\n  }\r\n\r\n  const toggleClickedStatus = (index) => {\r\n    let newArr = [...images];\r\n    newArr[index].clicked = newArr[index].clicked + 1;\r\n    setImages(newArr);\r\n  }\r\n\r\n  const handleClick = (index) => { \r\n    toggleClickedStatus(index);\r\n\r\n    if (images[index].clicked === 2) {\r\n      return;\r\n    } else { \r\n      addPoint();\r\n      shuffleImages();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    images.map((image) => {\r\n      if (image.clicked === 2) {\r\n        resetCurrentRound();\r\n      }\r\n    });\r\n  });\r\n  \r\n  return (\r\n    <div className=\"cards-container\">\r\n      {images.map((imageObj, index) => (\r\n        <div className=\"card\" onClick={() => handleClick(index)}>\r\n          <img src={imageObj.image}></img>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards;","import React, {useEffect} from 'react';\r\nimport Cards from './Cards.js';\r\nimport '../Styles/Game.css';\r\n\r\nfunction Game({currentScore: {currentScore, getCurrentScore}, maxScore: {maxScore, getMaxScore} }) {\r\n  \r\n  const addPoint = () => {\r\n    getCurrentScore(currentScore + 1);\r\n  }\r\n\r\n  const resetCurrentScore = () => {\r\n    getCurrentScore(0);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (maxScore < currentScore) {\r\n      getMaxScore(currentScore);\r\n    }\r\n  }, [currentScore]);\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <Cards addPoint={addPoint} resetCurrentScore={resetCurrentScore}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game;","import React, {useState} from 'react';\nimport Header from './Components/Header.js';\nimport Score from './Components/Score.js';\nimport Game from './Components/Game.js';\nimport './App.css';\n\nfunction App() {\n  const [currentScore, getCurrentScore] = useState(0);\n  const [maxScore, getMaxScore] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Score scores={{currentScore, maxScore}}  />\n      <Game currentScore={{currentScore, getCurrentScore}} maxScore={{maxScore, getMaxScore}} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}